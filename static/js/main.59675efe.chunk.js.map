{"version":3,"sources":["Popup.tsx","App.tsx","serviceWorker.js","index.js"],"names":["PhotoSwipe","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","photoSwipe","pswpElement","componentDidMount","state","isOpen","openPhotoSwipe","componentWillReceiveProps","nextProps","updateItems","items","closePhotoSwipe","componentWillUnmount","options","Photoswipe","PhotoswipeUIDefault","setState","init","arguments","length","undefined","forEach","item","push","invalidateCurrItems","updateSize","close","handleClose","onClose","_this2","id","className","classnames","trim","react_default","a","createElement","tabIndex","role","aria-hidden","ref","node","style","position","zIndex","top","right","title","React","Component","App","_useState","useState","_useState2","slicedToArray","changeIsOpen","onClick","Popup","src","w","h","closeOnScroll","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59675efe.chunk.js","sourcesContent":["import React from \"react\";\nimport Photoswipe, { Item, Options } from \"photoswipe\";\nimport PhotoswipeUIDefault from \"photoswipe/dist/photoswipe-ui-default\";\nimport classnames from \"classnames\";\nimport \"photoswipe/dist/default-skin/default-skin.css\";\nimport \"photoswipe/dist/photoswipe.css\";\n\ntype Props = {\n  isOpen: boolean;\n  items: Item[];\n  onClose: () => void;\n  options: Options;\n  id?: string;\n  className?: string;\n};\n\ntype State = {\n  isOpen: boolean;\n};\n\nclass PhotoSwipe extends React.Component<Props, State> {\n  photoSwipe: any;\n\n  pswpElement?: HTMLElement | null;\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      isOpen: this.props.isOpen\n    };\n  }\n\n  componentDidMount = () => {\n    const { isOpen } = this.state;\n    if (isOpen) {\n      this.openPhotoSwipe(this.props);\n    }\n  };\n\n  componentWillReceiveProps = (nextProps: Props) => {\n    const { isOpen } = this.state;\n    if (nextProps.isOpen) {\n      if (!isOpen) {\n        this.openPhotoSwipe(nextProps);\n      } else {\n        this.updateItems(nextProps.items);\n      }\n    } else if (isOpen) {\n      this.closePhotoSwipe();\n    }\n  };\n\n  componentWillUnmount = () => {\n    this.closePhotoSwipe();\n  };\n\n  openPhotoSwipe = (props: Props) => {\n    const { items, options } = props;\n\n    const pswpElement = this.pswpElement;\n\n    if (pswpElement) {\n      this.photoSwipe = new Photoswipe(\n        pswpElement,\n        PhotoswipeUIDefault,\n        items,\n        options\n      );\n\n      this.setState(\n        {\n          isOpen: true\n        },\n        () => {\n          this.photoSwipe.init();\n        }\n      );\n    }\n  };\n\n  updateItems = (items: Item[] = []) => {\n    this.photoSwipe.items.length = 0;\n\n    items.forEach(item => {\n      this.photoSwipe.items.push(item);\n    });\n\n    this.photoSwipe.invalidateCurrItems();\n\n    this.photoSwipe.updateSize(true);\n  };\n\n  closePhotoSwipe = () => {\n    if (!this.photoSwipe) {\n      return;\n    }\n\n    this.photoSwipe.close();\n  };\n\n  handleClose = () => {\n    const { onClose } = this.props;\n\n    this.setState(\n      {\n        isOpen: false\n      },\n      () => {\n        onClose && onClose();\n      }\n    );\n  };\n\n  render() {\n    const { id } = this.props;\n\n    let { className } = this.props;\n\n    className = classnames([\"pswp\", className]).trim();\n\n    return (\n      <div\n        id={id}\n        className={className}\n        tabIndex={-1}\n        role=\"dialog\"\n        aria-hidden=\"true\"\n        ref={node => {\n          this.pswpElement = node;\n        }}\n        style={{\n          position: \"absolute\",\n          zIndex: 2,\n          top: 80,\n          right: 0\n        }}\n      >\n        <div className=\"pswp__bg\" />\n        <div className=\"pswp__scroll-wrap\">\n          <div className=\"pswp__container\">\n            <div className=\"pswp__item\" />\n            <div className=\"pswp__item\" />\n            <div className=\"pswp__item\" />\n          </div>\n          <div className=\"pswp__ui pswp__ui--hidden\">\n            <div className=\"pswp__top-bar\">\n              <div className=\"pswp__counter\" />\n              <button\n                className=\"pswp__button pswp__button--close\"\n                title=\"Close (Esc)\"\n              />\n              <button\n                className=\"pswp__button pswp__button--share\"\n                title=\"Share\"\n              />\n              <button\n                className=\"pswp__button pswp__button--fs\"\n                title=\"Toggle fullscreen\"\n              />\n              <button\n                className=\"pswp__button pswp__button--zoom\"\n                title=\"Zoom in/out\"\n              />\n              <div className=\"pswp__preloader\">\n                <div className=\"pswp__preloader__icn\">\n                  <div className=\"pswp__preloader__cut\">\n                    <div className=\"pswp__preloader__donut\" />\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\">\n              <div className=\"pswp__share-tooltip\" />\n            </div>\n            <button\n              className=\"pswp__button pswp__button--arrow--left\"\n              title=\"Previous (arrow left)\"\n            />\n            <button\n              className=\"pswp__button pswp__button--arrow--right\"\n              title=\"Next (arrow right)\"\n            />\n            <div className=\"pswp__caption\">\n              <div className=\"pswp__caption__center\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default PhotoSwipe;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Popup from \"./Popup\";\n\nfunction App() {\n  const [isOpen, changeIsOpen] = useState();\n\n  return (\n    <div className=\"App\">\n      <button onClick={() => changeIsOpen(true)}>click me</button>\n      {isOpen && (\n        <Popup\n          isOpen={isOpen}\n          items={[\n            {\n              src: \"http://lorempixel.com/1200/900/sports/1\",\n              w: 1200,\n              h: 900\n            }\n          ]}\n          onClose={() => changeIsOpen(false)}\n          options={{\n            closeOnScroll: false\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}